{
  "scanDate": "2025-10-26T00:00:00Z",
  "scanType": "comprehensive-security-analysis",
  "summary": {
    "critical": 0,
    "high": 3,
    "medium": 12,
    "low": 8,
    "total": 23
  },
  "dependencies": {
    "vulnerabilities": [
      {
        "severity": "high",
        "package": "xlsx",
        "version": "<0.19.3",
        "category": "dependency",
        "description": "Prototype Pollution in sheetJS",
        "cwe": "CWE-1321",
        "cvss": 7.8,
        "remediation": "Update xlsx package to version 0.19.3 or later",
        "fixAvailable": false,
        "url": "https://github.com/advisories/GHSA-4r6h-8v6p-xvw6"
      },
      {
        "severity": "high",
        "package": "xlsx",
        "version": "<0.20.2",
        "category": "dependency",
        "description": "SheetJS Regular Expression Denial of Service (ReDoS)",
        "cwe": "CWE-1333",
        "cvss": 7.5,
        "remediation": "Update xlsx package to version 0.20.2 or later",
        "fixAvailable": false,
        "url": "https://github.com/advisories/GHSA-5pgg-2g8v-p4x9"
      },
      {
        "severity": "medium",
        "package": "nodemailer",
        "version": "<7.0.7",
        "category": "dependency",
        "description": "Email to an unintended domain can occur due to Interpretation Conflict",
        "cwe": "CWE-20, CWE-436",
        "cvss": 0,
        "remediation": "Update nodemailer to version 7.0.10",
        "fixAvailable": true,
        "url": "https://github.com/advisories/GHSA-mm7p-fcc7-pg87"
      },
      {
        "severity": "medium",
        "package": "validator",
        "version": "<=13.15.15",
        "category": "dependency",
        "description": "validator.js has a URL validation bypass vulnerability in its isURL function",
        "cwe": "CWE-79",
        "cvss": 6.1,
        "remediation": "Update validator package through express-validator dependency",
        "fixAvailable": false,
        "url": "https://github.com/advisories/GHSA-9965-vmph-33xx"
      },
      {
        "severity": "medium",
        "package": "vite",
        "version": "7.1.0 - 7.1.10",
        "category": "dependency",
        "description": "vite allows server.fs.deny bypass via backslash on Windows",
        "cwe": "CWE-22",
        "cvss": 0,
        "remediation": "Update vite to version > 7.1.10",
        "fixAvailable": true,
        "url": "https://github.com/advisories/GHSA-93m4-6634-74q7"
      },
      {
        "severity": "medium",
        "package": "swagger-jsdoc",
        "version": "3.6.0 || >=4.0.0",
        "category": "dependency",
        "description": "Vulnerable through swagger-parser dependency chain",
        "remediation": "Update swagger-jsdoc to version 3.7.0",
        "fixAvailable": true
      }
    ]
  },
  "codePatterns": {
    "vulnerabilities": [
      {
        "severity": "high",
        "category": "hardcoded-secrets",
        "description": "Hardcoded passwords in seed files and test files",
        "files": [
          {
            "file": "server/seedAdminUser.js",
            "line": 23,
            "pattern": "const hashedPassword = await bcrypt.hash(\"admin123\", 12);",
            "remediation": "Use environment variables for default passwords"
          },
          {
            "file": "server/routes/testRoutes.js",
            "line": 161,
            "pattern": "const hashedPassword = await bcrypt.hash(\"admin123\", 12);",
            "remediation": "Use environment variables for test passwords"
          },
          {
            "file": "prisma/seed.js",
            "line": 29,
            "pattern": "const adminPassword = process.env.ADMIN_PASSWORD || \"admin@123\";",
            "remediation": "Remove default fallback password"
          }
        ]
      },
      {
        "severity": "medium",
        "category": "raw-sql-queries",
        "description": "Raw SQL queries using $queryRaw that could be vulnerable",
        "files": [
          {
            "file": "server/controller/adminController.js",
            "line": 450,
            "pattern": "const monthlyTrends = await prisma.$queryRaw`SELECT TO_CHAR(...)`",
            "remediation": "Review query for potential injection points, ensure all inputs are sanitized"
          },
          {
            "file": "server/scripts/initDatabase.js",
            "line": 113,
            "pattern": "await prisma.$queryRaw`SELECT name FROM sqlite_master...`",
            "remediation": "Use Prisma schema introspection instead of raw queries"
          }
        ]
      },
      {
        "severity": "medium",
        "category": "xss-vulnerabilities",
        "description": "Potential XSS vulnerabilities through innerHTML and dangerouslySetInnerHTML",
        "files": [
          {
            "file": "client/components/QuickComplaintForm.tsx",
            "line": 952,
            "pattern": "dangerouslySetInnerHTML={{ __html: captchaData.data.captchaSvg }}",
            "remediation": "Sanitize SVG content before rendering or use safer alternatives"
          },
          {
            "file": "client/components/AttachmentPreview.tsx",
            "line": 153,
            "pattern": "wrapper.innerHTML = \"\";",
            "remediation": "Use textContent or safer DOM manipulation methods"
          },
          {
            "file": "test-report-generator.js",
            "line": 252,
            "pattern": "previewWindow.document.write(html);",
            "remediation": "Sanitize HTML content before writing to document"
          }
        ]
      },
      {
        "severity": "medium",
        "category": "information-disclosure",
        "description": "Potential information disclosure through error messages and logging",
        "files": [
          {
            "file": "server/controller/reportsControllerRevamped.js",
            "line": 1753,
            "pattern": "error: process.env.NODE_ENV === 'production' ? 'Internal server error' : error.message",
            "remediation": "Ensure consistent error handling across all controllers"
          },
          {
            "file": "server/db/connection.js",
            "line": 219,
            "pattern": "console.error(`   â€¢ DATABASE_URL: ${process.env.DATABASE_URL || \"NOT SET\"}`)",
            "remediation": "Mask database credentials in all logging statements"
          }
        ]
      },
      {
        "severity": "medium",
        "category": "debug-endpoints",
        "description": "Test and debug routes that should not be exposed in production",
        "files": [
          {
            "file": "server/routes/testRoutes.js",
            "line": "multiple",
            "pattern": "Test routes for user creation and system testing",
            "remediation": "Ensure test routes are disabled in production environment"
          }
        ]
      },
      {
        "severity": "low",
        "category": "console-logging",
        "description": "Console logging statements that may expose sensitive information",
        "files": [
          {
            "file": "client/utils/exportUtils.ts",
            "line": "multiple",
            "pattern": "console.error statements in export utilities",
            "remediation": "Replace console statements with proper logging system"
          },
          {
            "file": "vite.config.js",
            "line": 77,
            "pattern": "console.error(\"Proxy error:\", err.message);",
            "remediation": "Use structured logging instead of console statements"
          }
        ]
      },
      {
        "severity": "low",
        "category": "environment-exposure",
        "description": "Environment variables potentially exposed in client-side code",
        "files": [
          {
            "file": "vite.config.ts",
            "line": "multiple",
            "pattern": "Environment variable checks in client build configuration",
            "remediation": "Ensure no sensitive environment variables are exposed to client"
          }
        ]
      },
      {
        "severity": "medium",
        "category": "csrf-protection",
        "description": "Missing CSRF protection implementation",
        "files": [
          {
            "file": "server/middleware/auth.js",
            "line": "N/A",
            "pattern": "No CSRF token validation middleware found",
            "remediation": "Implement CSRF protection middleware for state-changing operations"
          }
        ]
      },
      {
        "severity": "low",
        "category": "rate-limiting",
        "description": "Limited rate limiting implementation",
        "files": [
          {
            "file": "server/routes/",
            "line": "N/A",
            "pattern": "Rate limiting not consistently applied across all endpoints",
            "remediation": "Implement comprehensive rate limiting on all API endpoints"
          }
        ]
      },
      {
        "severity": "medium",
        "category": "input-validation",
        "description": "Inconsistent input validation across endpoints",
        "files": [
          {
            "file": "server/controller/",
            "line": "multiple",
            "pattern": "Some endpoints lack comprehensive input validation",
            "remediation": "Implement consistent input validation using express-validator across all endpoints"
          }
        ]
      },
      {
        "severity": "low",
        "category": "file-upload-security",
        "description": "File upload security considerations",
        "files": [
          {
            "file": "server/controller/uploadController.js",
            "line": "multiple",
            "pattern": "File upload handling with potential security implications",
            "remediation": "Review file type validation, size limits, and storage security"
          }
        ]
      },
      {
        "severity": "low",
        "category": "session-security",
        "description": "JWT token handling and session management",
        "files": [
          {
            "file": "server/middleware/auth.js",
            "line": "multiple",
            "pattern": "JWT token extraction and validation",
            "remediation": "Review token expiration, refresh mechanisms, and secure storage"
          }
        ]
      }
    ]
  },
  "configuration": {
    "vulnerabilities": [
      {
        "severity": "medium",
        "category": "cors-configuration",
        "description": "CORS configuration may be too permissive",
        "files": [
          {
            "file": "server/app.js",
            "line": "N/A",
            "pattern": "CORS configuration needs review",
            "remediation": "Ensure CORS is configured with specific origins for production"
          }
        ]
      },
      {
        "severity": "low",
        "category": "security-headers",
        "description": "Missing security headers",
        "files": [
          {
            "file": "server/app.js",
            "line": "N/A",
            "pattern": "Security headers not comprehensively implemented",
            "remediation": "Implement helmet.js or equivalent security headers middleware"
          }
        ]
      }
    ]
  },
  "recommendations": [
    {
      "priority": "high",
      "category": "dependency-updates",
      "description": "Update vulnerable dependencies immediately",
      "actions": [
        "Update xlsx package to latest version (may require code changes due to breaking changes)",
        "Update nodemailer to version 7.0.10",
        "Update vite to latest version",
        "Review and update all other dependencies"
      ]
    },
    {
      "priority": "high",
      "category": "hardcoded-secrets",
      "description": "Remove all hardcoded passwords and secrets",
      "actions": [
        "Replace hardcoded passwords with environment variables",
        "Implement secure default password generation",
        "Review all configuration files for hardcoded secrets"
      ]
    },
    {
      "priority": "medium",
      "category": "input-validation",
      "description": "Implement comprehensive input validation",
      "actions": [
        "Add input validation to all API endpoints",
        "Sanitize all user inputs before database operations",
        "Implement consistent error handling"
      ]
    },
    {
      "priority": "medium",
      "category": "security-middleware",
      "description": "Implement security middleware",
      "actions": [
        "Add CSRF protection middleware",
        "Implement comprehensive rate limiting",
        "Add security headers middleware (helmet.js)",
        "Review and strengthen CORS configuration"
      ]
    },
    {
      "priority": "low",
      "category": "logging-security",
      "description": "Secure logging practices",
      "actions": [
        "Replace console logging with structured logging",
        "Ensure no sensitive data is logged",
        "Implement log rotation and secure storage"
      ]
    }
  ]
}