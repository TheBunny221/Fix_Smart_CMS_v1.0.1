{
  "openapi": "3.0.3",
  "info": {
    "title": "Fix_Smart_CMS API",
    "version": "1.0.3",
    "description": "\n        Comprehensive API documentation for Fix_Smart_CMS (NLC-CMS) - A modern complaint management system.\n        \n        ## Features\n        - **Multi-role Authentication**: Citizens, Ward Officers, Maintenance Teams, Administrators\n        - **Complaint Management**: Complete lifecycle from registration to resolution\n        - **Geographic Routing**: Ward-based automatic complaint assignment\n        - **File Management**: Unified attachment system for all file types\n        - **Real-time Notifications**: Email and in-app notification system\n        - **Analytics & Reporting**: Comprehensive dashboard and reporting capabilities\n        \n        ## Authentication\n        Most endpoints require JWT authentication. Include the token in the Authorization header:\n        `Authorization: Bearer <your-jwt-token>`\n        \n        ## Rate Limiting\n        API requests are rate-limited to prevent abuse. Development environment has higher limits.\n        \n        ## Response Format\n        All API responses follow a consistent format:\n        ```json\n        {\n          \"success\": boolean,\n          \"message\": \"string\",\n          \"data\": object | array | null,\n          \"errors\": array (optional)\n        }\n        ```\n      ",
    "contact": {
      "name": "API Support",
      "email": "api-support@nlc-cms.gov.in",
      "url": "https://github.com/nlc-cms/support"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "https://nlc-cms.gov.in/terms"
  },
  "servers": [
    {
      "url": "http://localhost:4005",
      "description": "Development server"
    },
    {
      "url": "https://staging-api.nlc-cms.gov.in",
      "description": "Staging server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from login endpoint"
      }
    },
    "schemas": {
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          },
          "data": {
            "type": "object",
            "description": "Response data (varies by endpoint)"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "An error occurred"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Validation failed"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "example": "email"
                },
                "message": {
                  "type": "string",
                  "example": "Invalid email format"
                }
              }
            }
          }
        }
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "example": 10
          },
          "total": {
            "type": "integer",
            "example": 100
          },
          "pages": {
            "type": "integer",
            "example": 10
          },
          "hasNext": {
            "type": "boolean",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique user identifier",
            "example": "clp123abc456def789"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "john.doe@example.com"
          },
          "fullName": {
            "type": "string",
            "description": "User's full name",
            "example": "John Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number",
            "example": "+91-9876543210"
          },
          "role": {
            "type": "string",
            "enum": [
              "CITIZEN",
              "WARD_OFFICER",
              "MAINTENANCE_TEAM",
              "ADMINISTRATOR",
              "GUEST"
            ],
            "description": "User role in the system",
            "example": "CITIZEN"
          },
          "wardId": {
            "type": "string",
            "description": "Associated ward ID (for officers)",
            "example": "ward123"
          },
          "ward": {
            "$ref": "#/components/schemas/Ward"
          },
          "department": {
            "type": "string",
            "description": "Department (for staff users)",
            "example": "Public Works"
          },
          "language": {
            "type": "string",
            "enum": [
              "en",
              "hi",
              "ml"
            ],
            "description": "Preferred language",
            "example": "en"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar image URL",
            "example": "/uploads/avatars/user123.jpg"
          },
          "isActive": {
            "type": "boolean",
            "description": "Account status",
            "example": true
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "description": "Last login timestamp",
            "example": "2024-12-01T10:30:00Z"
          },
          "joinedOn": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp",
            "example": "2024-01-15T08:00:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Ward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "ward123"
          },
          "name": {
            "type": "string",
            "example": "Ward 1 - Central"
          },
          "description": {
            "type": "string",
            "example": "Central business district ward"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "boundaries": {
            "type": "string",
            "description": "JSON string of polygon coordinates"
          },
          "centerLat": {
            "type": "number",
            "example": 9.9312
          },
          "centerLng": {
            "type": "number",
            "example": 76.2673
          },
          "boundingBox": {
            "type": "string",
            "description": "JSON string of bounding box coordinates"
          },
          "subZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubZone"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SubZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "subzone123"
          },
          "name": {
            "type": "string",
            "example": "Central Market Area"
          },
          "wardId": {
            "type": "string",
            "example": "ward123"
          },
          "description": {
            "type": "string",
            "example": "Main market and shopping area"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "boundaries": {
            "type": "string",
            "description": "JSON string of polygon coordinates"
          },
          "centerLat": {
            "type": "number",
            "example": 9.9315
          },
          "centerLng": {
            "type": "number",
            "example": 76.2675
          },
          "boundingBox": {
            "type": "string",
            "description": "JSON string of bounding box coordinates"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Complaint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique complaint identifier",
            "example": "complaint123"
          },
          "complaintId": {
            "type": "string",
            "description": "Human-readable complaint ID",
            "example": "KSC0001"
          },
          "title": {
            "type": "string",
            "description": "Complaint title",
            "example": "Street light not working"
          },
          "description": {
            "type": "string",
            "description": "Detailed complaint description",
            "example": "The street light on MG Road has been non-functional for 3 days"
          },
          "type": {
            "type": "string",
            "description": "Complaint type",
            "example": "STREET_LIGHTING"
          },
          "status": {
            "type": "string",
            "enum": [
              "REGISTERED",
              "ASSIGNED",
              "IN_PROGRESS",
              "RESOLVED",
              "CLOSED",
              "REOPENED"
            ],
            "description": "Current complaint status",
            "example": "REGISTERED"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "description": "Complaint priority level",
            "example": "MEDIUM"
          },
          "slaStatus": {
            "type": "string",
            "enum": [
              "ON_TIME",
              "WARNING",
              "OVERDUE",
              "COMPLETED"
            ],
            "description": "SLA compliance status",
            "example": "ON_TIME"
          },
          "wardId": {
            "type": "string",
            "example": "ward123"
          },
          "ward": {
            "$ref": "#/components/schemas/Ward"
          },
          "subZoneId": {
            "type": "string",
            "example": "subzone123"
          },
          "subZone": {
            "$ref": "#/components/schemas/SubZone"
          },
          "area": {
            "type": "string",
            "description": "Area name",
            "example": "MG Road"
          },
          "landmark": {
            "type": "string",
            "description": "Nearby landmark",
            "example": "Near City Mall"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "MG Road, Near City Mall, Kochi"
          },
          "coordinates": {
            "type": "string",
            "description": "JSON string of lat/lng coordinates",
            "example": "{\"lat\": 9.9312, \"lng\": 76.2673}"
          },
          "latitude": {
            "type": "number",
            "example": 9.9312
          },
          "longitude": {
            "type": "number",
            "example": 76.2673
          },
          "contactName": {
            "type": "string",
            "example": "John Doe"
          },
          "contactEmail": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "contactPhone": {
            "type": "string",
            "example": "+91-9876543210"
          },
          "isAnonymous": {
            "type": "boolean",
            "example": false
          },
          "submittedById": {
            "type": "string",
            "example": "user123"
          },
          "submittedBy": {
            "$ref": "#/components/schemas/User"
          },
          "assignedToId": {
            "type": "string",
            "example": "user456"
          },
          "assignedTo": {
            "$ref": "#/components/schemas/User"
          },
          "wardOfficerId": {
            "type": "string",
            "example": "officer123"
          },
          "wardOfficer": {
            "$ref": "#/components/schemas/User"
          },
          "maintenanceTeamId": {
            "type": "string",
            "example": "team123"
          },
          "maintenanceTeam": {
            "$ref": "#/components/schemas/User"
          },
          "resolvedById": {
            "type": "string",
            "example": "user789"
          },
          "submittedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T10:00:00Z"
          },
          "assignedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T11:00:00Z"
          },
          "resolvedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-02T15:30:00Z"
          },
          "closedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-02T16:00:00Z"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-03T10:00:00Z"
          },
          "remarks": {
            "type": "string",
            "description": "Internal remarks",
            "example": "Requires immediate attention"
          },
          "citizenFeedback": {
            "type": "string",
            "description": "Citizen feedback on resolution",
            "example": "Issue resolved satisfactorily"
          },
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "description": "Citizen rating (1-5)",
            "example": 4
          },
          "assignToTeam": {
            "type": "boolean",
            "description": "Team assignment flag",
            "example": false
          },
          "tags": {
            "type": "string",
            "description": "JSON array of tags",
            "example": "[\"urgent\", \"infrastructure\"]"
          },
          "statusLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusLog"
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ComplaintType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": 1,
            "description": "Unique identifier for the complaint type"
          },
          "name": {
            "type": "string",
            "example": "STREET_LIGHTING",
            "description": "Name of the complaint type"
          },
          "description": {
            "type": "string",
            "example": "Issues related to street lighting",
            "description": "Description of the complaint type"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "example": "MEDIUM",
            "description": "Default priority level"
          },
          "slaHours": {
            "type": "integer",
            "description": "Service Level Agreement in hours",
            "example": 48
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Whether the complaint type is active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "description"
        ]
      },
      "StatusLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "log123"
          },
          "complaintId": {
            "type": "string",
            "example": "complaint123"
          },
          "userId": {
            "type": "string",
            "example": "user123"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "fromStatus": {
            "type": "string",
            "description": "Previous status",
            "example": "REGISTERED"
          },
          "toStatus": {
            "type": "string",
            "description": "New status",
            "example": "ASSIGNED"
          },
          "comment": {
            "type": "string",
            "description": "Status change comment",
            "example": "Assigned to maintenance team"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T11:00:00Z"
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "attachment123"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "COMPLAINT",
              "CITIZEN",
              "USER",
              "MAINTENANCE_PHOTO"
            ],
            "description": "Type of entity this attachment belongs to",
            "example": "COMPLAINT"
          },
          "entityId": {
            "type": "string",
            "description": "ID of the entity this attachment belongs to",
            "example": "complaint123"
          },
          "complaintId": {
            "type": "string",
            "description": "Complaint ID (for backward compatibility)",
            "example": "complaint123"
          },
          "fileName": {
            "type": "string",
            "description": "Stored file name",
            "example": "1701234567890_image.jpg"
          },
          "originalName": {
            "type": "string",
            "description": "Original file name",
            "example": "street_light_issue.jpg"
          },
          "mimeType": {
            "type": "string",
            "description": "File MIME type",
            "example": "image/jpeg"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes",
            "example": 1024000
          },
          "url": {
            "type": "string",
            "description": "File access URL",
            "example": "/uploads/complaints/1701234567890_image.jpg"
          },
          "description": {
            "type": "string",
            "description": "Optional file description",
            "example": "Photo showing the broken street light"
          },
          "uploadedById": {
            "type": "string",
            "example": "user123"
          },
          "uploadedBy": {
            "$ref": "#/components/schemas/User"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "notification123"
          },
          "userId": {
            "type": "string",
            "example": "user123"
          },
          "complaintId": {
            "type": "string",
            "example": "complaint123"
          },
          "type": {
            "type": "string",
            "enum": [
              "IN_APP",
              "EMAIL",
              "SMS"
            ],
            "description": "Notification type",
            "example": "IN_APP"
          },
          "title": {
            "type": "string",
            "description": "Notification title",
            "example": "Complaint Status Updated"
          },
          "message": {
            "type": "string",
            "description": "Notification message",
            "example": "Your complaint KSC0001 has been assigned to maintenance team"
          },
          "isRead": {
            "type": "boolean",
            "description": "Read status",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OTPSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "otp123"
          },
          "userId": {
            "type": "string",
            "example": "user123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+91-9876543210"
          },
          "otpCode": {
            "type": "string",
            "description": "6-digit OTP code",
            "example": "123456"
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of OTP",
            "example": "GUEST_VERIFICATION"
          },
          "isVerified": {
            "type": "boolean",
            "example": false
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "example": "2024-12-01T10:15:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "verifiedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SystemConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "config123"
          },
          "key": {
            "type": "string",
            "description": "Configuration key",
            "example": "COMPLAINT_ID_PREFIX"
          },
          "value": {
            "type": "string",
            "description": "Configuration value",
            "example": "KSC"
          },
          "type": {
            "type": "string",
            "description": "Configuration type/category",
            "example": "app"
          },
          "description": {
            "type": "string",
            "description": "Configuration description",
            "example": "Prefix for complaint IDs"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserManagement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "CITIZEN",
              "WARD_OFFICER",
              "MAINTENANCE_TEAM",
              "ADMINISTRATOR"
            ]
          },
          "isActive": {
            "type": "boolean"
          },
          "ward": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              },
              "token": {
                "type": "string",
                "description": "JWT authentication token"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "fullName",
          "email",
          "phoneNumber",
          "password"
        ],
        "properties": {
          "fullName": {
            "type": "string",
            "minLength": 2
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^[+]?[0-9]{10,15}$"
          },
          "password": {
            "type": "string",
            "minLength": 6
          },
          "role": {
            "type": "string",
            "enum": [
              "CITIZEN"
            ],
            "default": "CITIZEN"
          }
        }
      },
      "OTPRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "OTPVerification": {
        "type": "object",
        "required": [
          "email",
          "otpCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "otpCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$"
          }
        }
      },
      "CaptchaResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "captchaId": {
                "type": "string",
                "description": "Unique CAPTCHA session ID"
              },
              "captchaImage": {
                "type": "string",
                "description": "Base64 encoded CAPTCHA image"
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time",
                "description": "CAPTCHA expiration time"
              }
            }
          }
        }
      },
      "CaptchaVerificationRequest": {
        "type": "object",
        "required": [
          "captchaId",
          "captchaText"
        ],
        "properties": {
          "captchaId": {
            "type": "string",
            "description": "CAPTCHA session ID from generation"
          },
          "captchaText": {
            "type": "string",
            "description": "User-entered CAPTCHA text",
            "example": "ABC123"
          }
        }
      },
      "ComplaintPhoto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique photo identifier"
          },
          "complaintId": {
            "type": "string",
            "description": "Associated complaint ID"
          },
          "fileName": {
            "type": "string",
            "description": "Stored file name"
          },
          "originalName": {
            "type": "string",
            "description": "Original file name"
          },
          "url": {
            "type": "string",
            "description": "Photo access URL"
          },
          "description": {
            "type": "string",
            "description": "Photo description or caption",
            "example": "Before repair - damaged road section"
          },
          "photoType": {
            "type": "string",
            "enum": [
              "BEFORE",
              "DURING",
              "AFTER",
              "EVIDENCE"
            ],
            "description": "Type of photo for categorization",
            "example": "BEFORE"
          },
          "uploadedById": {
            "type": "string",
            "description": "ID of user who uploaded the photo"
          },
          "uploadedBy": {
            "$ref": "#/components/schemas/User"
          },
          "mimeType": {
            "type": "string",
            "description": "File MIME type",
            "example": "image/jpeg"
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PhotoUploadRequest": {
        "type": "object",
        "properties": {
          "photos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "Photo files to upload (max 10 files)"
          },
          "descriptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Descriptions for each photo (optional)"
          },
          "photoTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BEFORE",
                "DURING",
                "AFTER",
                "EVIDENCE"
              ]
            },
            "description": "Types for each photo (optional)"
          }
        }
      },
      "GeoLocation": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 9.9312
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": 76.2673
          },
          "address": {
            "type": "string",
            "description": "Formatted address",
            "example": "MG Road, Kochi, Kerala, India"
          },
          "components": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string"
              },
              "area": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              }
            }
          },
          "ward": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "accuracy": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Location accuracy level"
          }
        }
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeoLocation"
            }
          },
          "totalResults": {
            "type": "integer"
          },
          "searchQuery": {
            "type": "string"
          }
        }
      },
      "ComplaintOTPRequest": {
        "type": "object",
        "required": [
          "complaintId",
          "email"
        ],
        "properties": {
          "complaintId": {
            "type": "string",
            "description": "Complaint tracking ID",
            "example": "KSC0001"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address associated with the complaint",
            "example": "john.doe@example.com"
          }
        }
      },
      "ComplaintOTPVerification": {
        "type": "object",
        "required": [
          "complaintId",
          "email",
          "otpCode"
        ],
        "properties": {
          "complaintId": {
            "type": "string",
            "description": "Complaint tracking ID",
            "example": "KSC0001"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address associated with the complaint",
            "example": "john.doe@example.com"
          },
          "otpCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "description": "6-digit OTP code",
            "example": "123456"
          }
        }
      },
      "GuestComplaintRequest": {
        "type": "object",
        "required": [
          "description",
          "area",
          "contactPhone",
          "wardId"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Brief title of the complaint",
            "example": "Street light not working"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the complaint",
            "example": "The street light on MG Road has been non-functional for 3 days"
          },
          "type": {
            "type": "string",
            "description": "Type of complaint",
            "example": "STREET_LIGHTING"
          },
          "area": {
            "type": "string",
            "description": "Area where the complaint is located",
            "example": "MG Road"
          },
          "landmark": {
            "type": "string",
            "description": "Nearby landmark",
            "example": "Near City Mall"
          },
          "address": {
            "type": "string",
            "description": "Full address",
            "example": "MG Road, Near City Mall, Kochi"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude coordinate",
            "example": 9.9312
          },
          "longitude": {
            "type": "number",
            "description": "Longitude coordinate",
            "example": 76.2673
          },
          "contactName": {
            "type": "string",
            "description": "Contact person name",
            "example": "John Doe"
          },
          "contactEmail": {
            "type": "string",
            "format": "email",
            "description": "Contact email address",
            "example": "john.doe@example.com"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+91-9876543210"
          },
          "wardId": {
            "type": "string",
            "description": "Ward ID where complaint is located",
            "example": "ward123"
          },
          "subZoneId": {
            "type": "string",
            "description": "Sub-zone ID (optional)",
            "example": "subzone123"
          },
          "isAnonymous": {
            "type": "boolean",
            "description": "Whether to submit anonymously",
            "default": false
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "default": "MEDIUM"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            },
            "description": "File attachments (max 5 files, 10MB each)"
          }
        }
      },
      "GuestComplaintResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "complaint": {
                "$ref": "#/components/schemas/Complaint"
              },
              "trackingId": {
                "type": "string",
                "description": "Tracking ID for the complaint",
                "example": "KSC0001"
              },
              "otpSent": {
                "type": "boolean",
                "description": "Whether OTP was sent for verification"
              }
            }
          }
        }
      },
      "OTPVerificationRequest": {
        "type": "object",
        "required": [
          "email",
          "otpCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "otpCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$",
            "example": "123456"
          }
        }
      },
      "PublicStats": {
        "type": "object",
        "properties": {
          "totalComplaints": {
            "type": "integer"
          },
          "resolvedComplaints": {
            "type": "integer"
          },
          "pendingComplaints": {
            "type": "integer"
          },
          "averageResolutionTime": {
            "type": "number",
            "description": "Average resolution time in hours"
          },
          "wardStats": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "wardId": {
                  "type": "string"
                },
                "wardName": {
                  "type": "string"
                },
                "complaintCount": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "ServiceRequest": {
        "type": "object",
        "required": [
          "serviceType",
          "description",
          "contactPhone"
        ],
        "properties": {
          "serviceType": {
            "type": "string",
            "description": "Type of service requested",
            "example": "WATER_CONNECTION"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of service request"
          },
          "contactName": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "wardId": {
            "type": "string"
          }
        }
      },
      "LogEntry": {
        "type": "object",
        "required": [
          "level",
          "message"
        ],
        "properties": {
          "level": {
            "type": "string",
            "enum": [
              "error",
              "warn",
              "info",
              "debug"
            ],
            "description": "Log level",
            "example": "error"
          },
          "message": {
            "type": "string",
            "description": "Log message",
            "example": "Failed to submit complaint"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the log occurred"
          },
          "userId": {
            "type": "string",
            "description": "User ID (if available)"
          },
          "sessionId": {
            "type": "string",
            "description": "Session identifier"
          },
          "userAgent": {
            "type": "string",
            "description": "Browser user agent"
          },
          "url": {
            "type": "string",
            "description": "URL where error occurred"
          },
          "stack": {
            "type": "string",
            "description": "Error stack trace (for errors)"
          },
          "metadata": {
            "type": "object",
            "description": "Additional context data"
          }
        }
      },
      "LogStats": {
        "type": "object",
        "properties": {
          "totalLogs": {
            "type": "integer",
            "description": "Total number of logs"
          },
          "logsByLevel": {
            "type": "object",
            "properties": {
              "error": {
                "type": "integer"
              },
              "warn": {
                "type": "integer"
              },
              "info": {
                "type": "integer"
              },
              "debug": {
                "type": "integer"
              }
            }
          },
          "recentErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            }
          },
          "topErrors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "MaintenanceAnalytics": {
        "type": "object",
        "properties": {
          "complaints": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total assigned complaints"
              },
              "resolved": {
                "type": "integer",
                "description": "Resolved complaints"
              },
              "pending": {
                "type": "integer",
                "description": "Pending complaints (assigned + in progress)"
              },
              "overdue": {
                "type": "integer",
                "description": "Overdue complaints"
              }
            }
          },
          "sla": {
            "type": "object",
            "properties": {
              "compliance": {
                "type": "number",
                "description": "SLA compliance percentage"
              },
              "avgResolutionTime": {
                "type": "number",
                "description": "Average resolution time in days"
              },
              "target": {
                "type": "number",
                "description": "Target resolution time in hours"
              }
            }
          },
          "trends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date"
                },
                "complaints": {
                  "type": "integer"
                },
                "resolved": {
                  "type": "integer"
                },
                "slaCompliance": {
                  "type": "number"
                }
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                },
                "avgTime": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                }
              }
            }
          },
          "performance": {
            "type": "object",
            "properties": {
              "userSatisfaction": {
                "type": "number",
                "description": "User satisfaction rating"
              },
              "escalationRate": {
                "type": "number",
                "description": "Task escalation rate percentage"
              },
              "firstTimeFixRate": {
                "type": "number",
                "description": "First time fix rate percentage"
              },
              "repeatComplaints": {
                "type": "number",
                "description": "Repeat complaints percentage"
              }
            }
          },
          "taskBreakdown": {
            "type": "object",
            "properties": {
              "pending": {
                "type": "integer"
              },
              "inProgress": {
                "type": "integer"
              },
              "completed": {
                "type": "integer"
              },
              "overdue": {
                "type": "integer"
              }
            }
          }
        }
      },
      "MaintenanceDashboard": {
        "type": "object",
        "properties": {
          "assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Complaint"
            },
            "description": "Latest 10 assignments"
          },
          "metrics": {
            "type": "object",
            "properties": {
              "totalAssignments": {
                "type": "integer"
              },
              "todayCompleted": {
                "type": "integer"
              },
              "overdueCount": {
                "type": "integer"
              },
              "urgentCount": {
                "type": "integer"
              }
            }
          },
          "overdueTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Complaint"
            },
            "description": "Top 5 overdue tasks"
          },
          "urgentTasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Complaint"
            },
            "description": "Top 5 urgent tasks"
          }
        }
      },
      "Material": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique material identifier"
          },
          "complaintId": {
            "type": "string",
            "description": "Associated complaint ID"
          },
          "name": {
            "type": "string",
            "description": "Material name",
            "example": "Cement bags"
          },
          "description": {
            "type": "string",
            "description": "Material description",
            "example": "50kg cement bags for road repair"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity required/used",
            "example": 10
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "bags"
          },
          "estimatedCost": {
            "type": "number",
            "description": "Estimated cost per unit",
            "example": 350
          },
          "actualCost": {
            "type": "number",
            "description": "Actual cost incurred",
            "example": 340
          },
          "supplier": {
            "type": "string",
            "description": "Material supplier",
            "example": "ABC Construction Supplies"
          },
          "status": {
            "type": "string",
            "enum": [
              "REQUIRED",
              "ORDERED",
              "DELIVERED",
              "USED"
            ],
            "description": "Material status",
            "example": "DELIVERED"
          },
          "addedById": {
            "type": "string",
            "description": "ID of user who added the material"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MaterialRequest": {
        "type": "object",
        "required": [
          "name",
          "quantity",
          "unit"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Cement bags"
          },
          "description": {
            "type": "string",
            "example": "50kg cement bags for road repair"
          },
          "quantity": {
            "type": "number",
            "example": 10
          },
          "unit": {
            "type": "string",
            "example": "bags"
          },
          "estimatedCost": {
            "type": "number",
            "example": 350
          },
          "supplier": {
            "type": "string",
            "example": "ABC Construction Supplies"
          },
          "status": {
            "type": "string",
            "enum": [
              "REQUIRED",
              "ORDERED",
              "DELIVERED",
              "USED"
            ],
            "default": "REQUIRED"
          }
        }
      },
      "DashboardMetrics": {
        "type": "object",
        "properties": {
          "complaints": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "registered": {
                "type": "integer"
              },
              "assigned": {
                "type": "integer"
              },
              "inProgress": {
                "type": "integer"
              },
              "resolved": {
                "type": "integer"
              },
              "closed": {
                "type": "integer"
              }
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                }
              }
            }
          },
          "today": {
            "type": "object",
            "properties": {
              "todayTotal": {
                "type": "integer"
              },
              "todayResolved": {
                "type": "integer"
              }
            }
          }
        }
      },
      "TrendData": {
        "type": "object",
        "properties": {
          "trends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date"
                },
                "complaints": {
                  "type": "integer"
                },
                "resolved": {
                  "type": "integer"
                },
                "slaCompliance": {
                  "type": "number",
                  "description": "SLA compliance percentage"
                }
              }
            }
          }
        }
      },
      "SLAReport": {
        "type": "object",
        "properties": {
          "slaReport": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "priority": {
                  "type": "string",
                  "enum": [
                    "LOW",
                    "MEDIUM",
                    "HIGH",
                    "CRITICAL"
                  ]
                },
                "total": {
                  "type": "integer"
                },
                "onTime": {
                  "type": "integer"
                },
                "warning": {
                  "type": "integer"
                },
                "overdue": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "AnalyticsData": {
        "type": "object",
        "properties": {
          "complaints": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "resolved": {
                "type": "integer"
              },
              "pending": {
                "type": "integer"
              },
              "overdue": {
                "type": "integer"
              }
            }
          },
          "sla": {
            "type": "object",
            "properties": {
              "compliance": {
                "type": "number"
              },
              "avgResolutionTime": {
                "type": "number"
              },
              "target": {
                "type": "number"
              }
            }
          },
          "trends": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string"
                },
                "complaints": {
                  "type": "integer"
                },
                "resolved": {
                  "type": "integer"
                },
                "slaCompliance": {
                  "type": "number"
                }
              }
            }
          },
          "wards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "complaints": {
                  "type": "integer"
                },
                "resolved": {
                  "type": "integer"
                },
                "avgTime": {
                  "type": "number"
                },
                "slaScore": {
                  "type": "number"
                }
              }
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "count": {
                  "type": "integer"
                },
                "avgTime": {
                  "type": "number"
                },
                "color": {
                  "type": "string"
                }
              }
            }
          },
          "performance": {
            "type": "object",
            "properties": {
              "userSatisfaction": {
                "type": "number"
              },
              "escalationRate": {
                "type": "number"
              },
              "firstCallResolution": {
                "type": "number"
              },
              "repeatComplaints": {
                "type": "number"
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "totalRecords": {
                "type": "integer"
              },
              "pageSize": {
                "type": "integer"
              },
              "currentPage": {
                "type": "integer"
              },
              "totalPages": {
                "type": "integer"
              },
              "dataFetchedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "HeatmapData": {
        "type": "object",
        "properties": {
          "xLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "X-axis labels (complaint types)"
          },
          "xTypeKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Original type keys"
          },
          "yLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Y-axis labels (wards or sub-zones)"
          },
          "matrix": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "2D matrix of complaint counts"
          },
          "xAxisLabel": {
            "type": "string"
          },
          "yAxisLabel": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "properties": {
              "yIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "FileUpload": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "originalName": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "size": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "WardBoundary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "boundaries": {
            "type": "string",
            "description": "JSON string of polygon coordinates"
          },
          "centerLat": {
            "type": "number"
          },
          "centerLng": {
            "type": "number"
          },
          "boundingBox": {
            "type": "string",
            "description": "JSON string of bounding box coordinates"
          },
          "subZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubZoneBoundary"
            }
          }
        }
      },
      "SubZoneBoundary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "wardId": {
            "type": "string"
          },
          "boundaries": {
            "type": "string"
          },
          "centerLat": {
            "type": "number"
          },
          "centerLng": {
            "type": "number"
          },
          "boundingBox": {
            "type": "string"
          }
        }
      },
      "LocationDetection": {
        "type": "object",
        "properties": {
          "exact": {
            "type": "object",
            "properties": {
              "ward": {
                "$ref": "#/components/schemas/WardBoundary"
              },
              "subZone": {
                "$ref": "#/components/schemas/SubZoneBoundary"
              }
            }
          },
          "nearest": {
            "type": "object",
            "properties": {
              "ward": {
                "$ref": "#/components/schemas/WardBoundary"
              },
              "subZone": {
                "$ref": "#/components/schemas/SubZoneBoundary"
              },
              "distance": {
                "type": "number"
              }
            }
          },
          "coordinates": {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number"
              },
              "longitude": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "description": "Number of items per page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        }
      },
      "SortParam": {
        "name": "sort",
        "in": "query",
        "description": "Sort field and direction (e.g., 'createdAt:desc')",
        "schema": {
          "type": "string",
          "default": "createdAt:desc"
        }
      },
      "SearchParam": {
        "name": "search",
        "in": "query",
        "description": "Search query string",
        "schema": {
          "type": "string"
        }
      },
      "StatusParam": {
        "name": "status",
        "in": "query",
        "description": "Filter by status",
        "schema": {
          "type": "string",
          "enum": [
            "REGISTERED",
            "ASSIGNED",
            "IN_PROGRESS",
            "RESOLVED",
            "CLOSED",
            "REOPENED"
          ]
        }
      },
      "PriorityParam": {
        "name": "priority",
        "in": "query",
        "description": "Filter by priority",
        "schema": {
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ]
        }
      },
      "WardParam": {
        "name": "ward",
        "in": "query",
        "description": "Filter by ward ID",
        "schema": {
          "type": "string"
        }
      },
      "DateFromParam": {
        "name": "dateFrom",
        "in": "query",
        "description": "Filter from date (ISO format)",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "DateToParam": {
        "name": "dateTo",
        "in": "query",
        "description": "Filter to date (ISO format)",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "message": "Authentication required. Please provide a valid token."
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "message": "You don't have permission to access this resource."
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "message": "The requested resource was not found."
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "example": {
              "success": false,
              "message": "An internal server error occurred. Please try again later."
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User management operations"
    },
    {
      "name": "Admin",
      "description": "Administrative operations (Admin only)"
    },
    {
      "name": "Complaints",
      "description": "Complaint management operations"
    },
    {
      "name": "Wards",
      "description": "Ward and geographic boundary management"
    },
    {
      "name": "Guest",
      "description": "Guest user operations (anonymous complaints)"
    },
    {
      "name": "Reports",
      "description": "Reporting and analytics endpoints"
    },
    {
      "name": "Uploads",
      "description": "File upload and attachment management"
    },
    {
      "name": "System Config",
      "description": "System configuration management"
    },
    {
      "name": "Notifications",
      "description": "Notification management"
    },
    {
      "name": "Maintenance",
      "description": "Maintenance team operations and analytics"
    },
    {
      "name": "Health",
      "description": "System health and monitoring endpoints"
    },
    {
      "name": "Captcha",
      "description": "CAPTCHA generation and verification for security"
    },
    {
      "name": "Complaint Photos",
      "description": "Photo management for complaint documentation and progress tracking"
    },
    {
      "name": "Geo",
      "description": "Geographic and location-based services"
    },
    {
      "name": "Guest OTP",
      "description": "OTP-based operations for guest users"
    },
    {
      "name": "Logs",
      "description": "Application logging and monitoring endpoints"
    },
    {
      "name": "Materials",
      "description": "Material management for complaint resolution"
    },
    {
      "name": "SystemConfig",
      "description": "System configuration management"
    }
  ],
  "externalDocs": {
    "description": "Find more info about Fix_Smart_CMS",
    "url": "https://github.com/nlc-cms/documentation"
  },
  "paths": {
    "/api/admin/users": {
      "get": {
        "summary": "Get all users (Admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ward",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "all"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserManagement"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "pages": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user (Admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fullName",
                  "email",
                  "role"
                ],
                "properties": {
                  "fullName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "CITIZEN",
                      "WARD_OFFICER",
                      "MAINTENANCE_TEAM",
                      "ADMINISTRATOR"
                    ]
                  },
                  "wardId": {
                    "type": "string"
                  },
                  "department": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/admin/users/{id}": {
      "put": {
        "summary": "Update a user (Admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserManagement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user (Admin only)",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/admin/users/{id}/activate": {
      "put": {
        "summary": "Activate a user account",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activated successfully"
          }
        }
      }
    },
    "/api/admin/users/{id}/deactivate": {
      "put": {
        "summary": "Deactivate a user account",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deactivated successfully"
          }
        }
      }
    },
    "/api/admin/users/bulk": {
      "post": {
        "summary": "Perform bulk actions on users",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": [
                      "activate",
                      "deactivate",
                      "delete"
                    ]
                  },
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk action completed"
          }
        }
      }
    },
    "/api/admin/stats/users": {
      "get": {
        "summary": "Get user statistics",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User statistics"
          }
        }
      }
    },
    "/api/admin/stats/system": {
      "get": {
        "summary": "Get system-wide statistics",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "System statistics"
          }
        }
      }
    },
    "/api/admin/analytics": {
      "get": {
        "summary": "Get comprehensive analytics data",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "ward",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics data"
          }
        }
      }
    },
    "/api/admin/roles": {
      "put": {
        "summary": "Manage user roles and permissions",
        "tags": [
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "newRole": {
                    "type": "string",
                    "enum": [
                      "CITIZEN",
                      "WARD_OFFICER",
                      "MAINTENANCE_TEAM",
                      "ADMINISTRATOR"
                    ]
                  },
                  "wardId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              },
              "example": {
                "fullName": "John Doe",
                "email": "john.doe@example.com",
                "phoneNumber": "+91-9876543210",
                "password": "SecurePass123",
                "role": "CITIZEN"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "field": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email already exists"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login with email and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "example": {
                "email": "john.doe@example.com",
                "password": "SecurePass123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "401": {
            "description": "Authentication failed"
          }
        }
      }
    },
    "/api/auth/login-otp": {
      "post": {
        "summary": "Request OTP for email-based login",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPRequest"
              },
              "example": {
                "email": "john.doe@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully"
          },
          "400": {
            "description": "Invalid email or user not found"
          }
        }
      }
    },
    "/api/auth/verify-otp": {
      "post": {
        "summary": "Verify OTP and complete login",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPVerification"
              },
              "example": {
                "email": "john.doe@example.com",
                "otpCode": "123456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified, login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP"
          }
        }
      }
    },
    "/api/auth/verify-registration-otp": {
      "post": {
        "summary": "Verify OTP during registration process",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPVerification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration completed successfully"
          },
          "400": {
            "description": "Invalid or expired OTP"
          }
        }
      }
    },
    "/api/auth/resend-registration-otp": {
      "post": {
        "summary": "Resend OTP for registration",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    },
    "/api/auth/send-password-setup": {
      "post": {
        "summary": "Send password setup email for new users",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password setup email sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/set-password/{token}": {
      "post": {
        "summary": "Set password using token from email",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password setup token from email"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "minLength": 6
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password set successfully"
          },
          "400": {
            "description": "Invalid or expired token"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout user (client-side token removal)",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "summary": "Get current user profile",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        }
      }
    },
    "/api/auth/verify-token": {
      "get": {
        "summary": "Verify JWT token validity",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid"
          },
          "401": {
            "description": "Token is invalid or expired"
          }
        }
      }
    },
    "/api/auth/profile": {
      "put": {
        "summary": "Update user profile",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fullName": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "language": {
                    "type": "string",
                    "enum": [
                      "en",
                      "hi",
                      "ml"
                    ]
                  }
                }
              },
              "example": {
                "fullName": "John Updated Doe",
                "phoneNumber": "+91-9876543211",
                "language": "hi"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/change-password": {
      "put": {
        "summary": "Change user password",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6
                  }
                }
              },
              "example": {
                "currentPassword": "oldpassword",
                "newPassword": "NewSecurePassword123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Current password is incorrect"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/captcha/generate": {
      "get": {
        "summary": "Generate a new CAPTCHA",
        "tags": [
          "Captcha"
        ],
        "description": "Generate a new CAPTCHA image and session for security verification",
        "responses": {
          "200": {
            "description": "CAPTCHA generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptchaResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failed to generate CAPTCHA"
          }
        }
      }
    },
    "/api/captcha/verify": {
      "post": {
        "summary": "Verify CAPTCHA text",
        "tags": [
          "Captcha"
        ],
        "description": "Verify the user-entered CAPTCHA text against the generated CAPTCHA",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptchaVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "CAPTCHA verification result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "verified": {
                          "type": "boolean",
                          "description": "Whether CAPTCHA was verified successfully"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid CAPTCHA or expired session"
          }
        }
      }
    },
    "/api/complaints/{id}/photos": {
      "get": {
        "summary": "Get photos for a complaint",
        "tags": [
          "Complaint Photos"
        ],
        "description": "Retrieve all photos associated with a specific complaint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Complaint ID"
          },
          {
            "in": "query",
            "name": "photoType",
            "schema": {
              "type": "string",
              "enum": [
                "BEFORE",
                "DURING",
                "AFTER",
                "EVIDENCE"
              ]
            },
            "description": "Filter by photo type"
          }
        ],
        "responses": {
          "200": {
            "description": "Photos retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ComplaintPhoto"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Complaint not found"
          }
        }
      },
      "post": {
        "summary": "Upload photos for a complaint",
        "tags": [
          "Complaint Photos"
        ],
        "description": "Upload multiple photos for complaint documentation (Maintenance Team only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Complaint ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PhotoUploadRequest"
              },
              "encoding": {
                "photos": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Photos uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "uploadedPhotos": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ComplaintPhoto"
                          }
                        },
                        "totalUploaded": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Complaint not found"
          },
          "413": {
            "description": "File too large"
          },
          "415": {
            "description": "Unsupported file type"
          }
        }
      }
    },
    "/api/complaint-photos/{id}": {
      "get": {
        "summary": "Get specific complaint photo",
        "tags": [
          "Complaint Photos"
        ],
        "description": "Retrieve a specific photo by its ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Photo ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Photo retrieved successfully",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Photo not found"
          }
        }
      },
      "put": {
        "summary": "Update photo description",
        "tags": [
          "Complaint Photos"
        ],
        "description": "Update the description or metadata of a complaint photo (Maintenance Team only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Photo ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "New photo description"
                  },
                  "photoType": {
                    "type": "string",
                    "enum": [
                      "BEFORE",
                      "DURING",
                      "AFTER",
                      "EVIDENCE"
                    ],
                    "description": "Photo type/category"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Photo updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ComplaintPhoto"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Photo not found"
          }
        }
      },
      "delete": {
        "summary": "Delete complaint photo",
        "tags": [
          "Complaint Photos"
        ],
        "description": "Remove a photo from complaint (Maintenance Team only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Photo ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Photo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Photo not found"
          }
        }
      }
    },
    "/api/complaints/public/stats": {
      "get": {
        "summary": "Get public complaint statistics",
        "tags": [
          "Complaints"
        ],
        "description": "Retrieve general complaint statistics without authentication",
        "responses": {
          "200": {
            "description": "Public statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalComplaints": {
                          "type": "integer"
                        },
                        "resolvedComplaints": {
                          "type": "integer"
                        },
                        "pendingComplaints": {
                          "type": "integer"
                        },
                        "averageResolutionTime": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/complaints": {
      "get": {
        "summary": "Get complaints with filtering and pagination",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/SortParam"
          },
          {
            "$ref": "#/components/parameters/SearchParam"
          },
          {
            "$ref": "#/components/parameters/StatusParam"
          },
          {
            "$ref": "#/components/parameters/PriorityParam"
          },
          {
            "$ref": "#/components/parameters/WardParam"
          },
          {
            "$ref": "#/components/parameters/DateFromParam"
          },
          {
            "$ref": "#/components/parameters/DateToParam"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by complaint type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignedTo",
            "in": "query",
            "description": "Filter by assigned user ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complaints retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaints": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Complaint"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/PaginationMeta"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new complaint",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "description",
                  "wardId",
                  "area",
                  "contactPhone"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Street light not working"
                  },
                  "description": {
                    "type": "string",
                    "example": "The street light on MG Road has been non-functional for 3 days"
                  },
                  "type": {
                    "type": "string",
                    "example": "STREET_LIGHTING"
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "LOW",
                      "MEDIUM",
                      "HIGH",
                      "CRITICAL"
                    ],
                    "default": "MEDIUM"
                  },
                  "wardId": {
                    "type": "string",
                    "example": "ward123"
                  },
                  "subZoneId": {
                    "type": "string",
                    "example": "subzone123"
                  },
                  "area": {
                    "type": "string",
                    "example": "MG Road"
                  },
                  "landmark": {
                    "type": "string",
                    "example": "Near City Mall"
                  },
                  "address": {
                    "type": "string",
                    "example": "MG Road, Near City Mall, Kochi"
                  },
                  "latitude": {
                    "type": "number",
                    "example": 9.9312
                  },
                  "longitude": {
                    "type": "number",
                    "example": 76.2673
                  },
                  "contactName": {
                    "type": "string",
                    "example": "John Doe"
                  },
                  "contactEmail": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com"
                  },
                  "contactPhone": {
                    "type": "string",
                    "example": "+91-9876543210"
                  },
                  "isAnonymous": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Complaint created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaint": {
                          "$ref": "#/components/schemas/Complaint"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/complaints/stats": {
      "get": {
        "summary": "Get complaint statistics for authenticated users",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalComplaints": {
                          "type": "integer"
                        },
                        "myComplaints": {
                          "type": "integer"
                        },
                        "resolvedComplaints": {
                          "type": "integer"
                        },
                        "pendingComplaints": {
                          "type": "integer"
                        },
                        "statusBreakdown": {
                          "type": "object"
                        },
                        "priorityBreakdown": {
                          "type": "object"
                        },
                        "averageResolutionTime": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/complaints/ward-users": {
      "get": {
        "summary": "Get users for complaint assignment",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get list of users available for complaint assignment (Ward Officer access)",
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "wardOfficers": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "maintenanceTeams": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/complaints/ward-dashboard-stats": {
      "get": {
        "summary": "Get ward-specific dashboard statistics",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get dashboard statistics for the ward officer's assigned ward",
        "responses": {
          "200": {
            "description": "Ward statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "wardInfo": {
                          "$ref": "#/components/schemas/Ward"
                        },
                        "totalComplaints": {
                          "type": "integer"
                        },
                        "pendingComplaints": {
                          "type": "integer"
                        },
                        "resolvedComplaints": {
                          "type": "integer"
                        },
                        "overdueComplaints": {
                          "type": "integer"
                        },
                        "statusBreakdown": {
                          "type": "object"
                        },
                        "priorityBreakdown": {
                          "type": "object"
                        },
                        "recentComplaints": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Complaint"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/complaints/{id}": {
      "get": {
        "summary": "Get a single complaint by ID",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complaint retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaint": {
                          "$ref": "#/components/schemas/Complaint"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "put": {
        "summary": "Update complaint (general update including status, priority, assignment)",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "REGISTERED",
                      "ASSIGNED",
                      "IN_PROGRESS",
                      "RESOLVED",
                      "CLOSED"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "LOW",
                      "MEDIUM",
                      "HIGH",
                      "CRITICAL"
                    ]
                  },
                  "assignedToId": {
                    "type": "string"
                  },
                  "wardOfficerId": {
                    "type": "string"
                  },
                  "maintenanceTeamId": {
                    "type": "string"
                  },
                  "remarks": {
                    "type": "string"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Status change comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complaint updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaint": {
                          "$ref": "#/components/schemas/Complaint"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/complaints/{id}/status": {
      "put": {
        "summary": "Update complaint status (legacy endpoint)",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "REGISTERED",
                      "ASSIGNED",
                      "IN_PROGRESS",
                      "RESOLVED",
                      "CLOSED"
                    ]
                  },
                  "comment": {
                    "type": "string",
                    "description": "Status change comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/complaints/{id}/assign": {
      "put": {
        "summary": "Assign complaint to user or team",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignedToId": {
                    "type": "string",
                    "description": "User ID to assign complaint to"
                  },
                  "wardOfficerId": {
                    "type": "string",
                    "description": "Ward officer ID"
                  },
                  "maintenanceTeamId": {
                    "type": "string",
                    "description": "Maintenance team member ID"
                  },
                  "comment": {
                    "type": "string",
                    "description": "Assignment comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complaint assigned successfully"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/complaints/{id}/feedback": {
      "post": {
        "summary": "Add citizen feedback to resolved complaint",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "feedback",
                  "rating"
                ],
                "properties": {
                  "feedback": {
                    "type": "string",
                    "description": "Citizen feedback text",
                    "example": "The issue was resolved quickly and efficiently"
                  },
                  "rating": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating from 1 to 5",
                    "example": 4
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback added successfully"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/complaints/{id}/reopen": {
      "put": {
        "summary": "Reopen a closed complaint",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "reason"
                ],
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for reopening the complaint",
                    "example": "Issue not fully resolved, requires additional work"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complaint reopened successfully"
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/complaints/{id}/attachments": {
      "post": {
        "summary": "Upload attachment to complaint",
        "tags": [
          "Complaints"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Complaint ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File to upload"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional file description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "attachment": {
                          "$ref": "#/components/schemas/Attachment"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/complaint-types": {
      "get": {
        "summary": "Get all complaint types",
        "tags": [
          "Complaint Types"
        ],
        "responses": {
          "200": {
            "description": "List of all complaint types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ComplaintType"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new complaint type",
        "tags": [
          "Complaint Types"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Complaint type created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/complaint-types/stats": {
      "get": {
        "summary": "Get complaint type statistics",
        "tags": [
          "Complaint Types"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Complaint type usage statistics"
          }
        }
      }
    },
    "/api/complaint-types/{id}": {
      "get": {
        "summary": "Get complaint type by ID",
        "tags": [
          "Complaint Types"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complaint type details"
          },
          "404": {
            "description": "Complaint type not found"
          }
        }
      },
      "put": {
        "summary": "Update a complaint type",
        "tags": [
          "Complaint Types"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complaint type updated successfully"
          },
          "404": {
            "description": "Complaint type not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a complaint type",
        "tags": [
          "Complaint Types"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complaint type deleted successfully"
          },
          "404": {
            "description": "Complaint type not found"
          }
        }
      }
    },
    "/api/geo/reverse": {
      "get": {
        "summary": "Reverse geocode coordinates to address",
        "tags": [
          "Geo"
        ],
        "description": "Convert latitude and longitude coordinates to a human-readable address",
        "parameters": [
          {
            "in": "query",
            "name": "lat",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": -90,
              "maximum": 90
            },
            "description": "Latitude coordinate",
            "example": 9.9312
          },
          {
            "in": "query",
            "name": "lng",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": -180,
              "maximum": 180
            },
            "description": "Longitude coordinate",
            "example": 76.2673
          },
          {
            "in": "query",
            "name": "includeWard",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "description": "Include ward information in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Address retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/GeoLocation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid coordinates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Geocoding service error"
          }
        }
      }
    },
    "/api/guest-otp/test": {
      "get": {
        "summary": "Test guest OTP routes accessibility",
        "tags": [
          "Guest OTP"
        ],
        "description": "Test endpoint to verify that guest OTP routes are accessible",
        "responses": {
          "200": {
            "description": "Routes are accessible",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/guest-otp/request-complaint-otp": {
      "post": {
        "summary": "Request OTP for complaint access",
        "tags": [
          "Guest OTP"
        ],
        "description": "Request an OTP to access complaint details for guest users",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintOTPRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "otpSent": {
                          "type": "boolean"
                        },
                        "expiresAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid complaint ID or email"
          },
          "404": {
            "description": "Complaint not found"
          }
        }
      }
    },
    "/api/guest-otp/verify-complaint-otp": {
      "post": {
        "summary": "Verify OTP for complaint access",
        "tags": [
          "Guest OTP"
        ],
        "description": "Verify the OTP to gain access to complaint details",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplaintOTPVerification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "verified": {
                          "type": "boolean"
                        },
                        "accessToken": {
                          "type": "string",
                          "description": "Temporary access token for complaint details"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "OTP session not found"
          }
        }
      }
    },
    "/api/guest-otp/complaint-details": {
      "post": {
        "summary": "Get complaint details with OTP verification",
        "tags": [
          "Guest OTP"
        ],
        "description": "Retrieve detailed complaint information after OTP verification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "complaintId",
                  "accessToken"
                ],
                "properties": {
                  "complaintId": {
                    "type": "string",
                    "description": "Complaint tracking ID"
                  },
                  "accessToken": {
                    "type": "string",
                    "description": "Access token from OTP verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complaint details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaint": {
                          "$ref": "#/components/schemas/Complaint"
                        },
                        "statusHistory": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StatusLog"
                          }
                        },
                        "attachments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Attachment"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired access token"
          },
          "404": {
            "description": "Complaint not found"
          }
        }
      }
    },
    "/api/guest/complaint": {
      "post": {
        "summary": "Submit a guest complaint",
        "tags": [
          "Guest"
        ],
        "description": "Submit a complaint as a guest user without authentication",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GuestComplaintRequest"
              },
              "encoding": {
                "attachments": {
                  "contentType": "image/*, application/pdf, application/msword, text/plain"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Complaint submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestComplaintResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "413": {
            "description": "File too large (max 10MB per file)"
          },
          "415": {
            "description": "Unsupported file type"
          }
        }
      }
    },
    "/api/guest/complaint-with-attachments": {
      "post": {
        "summary": "Submit guest complaint with multiple attachments",
        "tags": [
          "Guest"
        ],
        "description": "Submit a complaint with multiple file attachments",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/GuestComplaintRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Complaint with attachments submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestComplaintResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "413": {
            "description": "File too large"
          },
          "415": {
            "description": "Unsupported file type"
          }
        }
      }
    },
    "/api/guest/verify-otp": {
      "post": {
        "summary": "Verify OTP and register guest complaint",
        "tags": [
          "Guest"
        ],
        "description": "Verify OTP sent to email and complete complaint registration",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OTPVerificationRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "attachments": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "binary"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified and complaint registered successfully"
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "OTP session not found"
          }
        }
      }
    },
    "/api/guest/resend-otp": {
      "post": {
        "summary": "Resend OTP for guest complaint verification",
        "tags": [
          "Guest"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully"
          },
          "400": {
            "description": "Invalid email or no pending OTP session"
          },
          "429": {
            "description": "Too many OTP requests"
          }
        }
      }
    },
    "/api/guest/track/{complaintId}": {
      "get": {
        "summary": "Track complaint status",
        "tags": [
          "Guest"
        ],
        "description": "Track the status of a complaint using complaint ID",
        "parameters": [
          {
            "in": "path",
            "name": "complaintId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Complaint tracking ID (e.g., KSC0001)",
            "example": "KSC0001"
          }
        ],
        "responses": {
          "200": {
            "description": "Complaint details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaint": {
                          "$ref": "#/components/schemas/Complaint"
                        },
                        "statusHistory": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/StatusLog"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Complaint not found"
          }
        }
      }
    },
    "/api/guest/stats": {
      "get": {
        "summary": "Get public complaint statistics",
        "tags": [
          "Guest"
        ],
        "description": "Retrieve public statistics about complaints and system performance",
        "responses": {
          "200": {
            "description": "Public statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/PublicStats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/guest/wards": {
      "get": {
        "summary": "Get list of available wards",
        "tags": [
          "Guest"
        ],
        "description": "Retrieve list of all active wards for complaint submission",
        "responses": {
          "200": {
            "description": "Wards list retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ward"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/guest/complaint-types": {
      "get": {
        "summary": "Get available complaint types",
        "tags": [
          "Guest"
        ],
        "description": "Retrieve list of all active complaint types",
        "responses": {
          "200": {
            "description": "Complaint types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ComplaintType"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/guest/service-request": {
      "post": {
        "summary": "Submit a guest service request",
        "tags": [
          "Guest"
        ],
        "description": "Submit a service request as a guest user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service request submitted successfully"
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/guest/verify-service-otp": {
      "post": {
        "summary": "Verify OTP for service request",
        "tags": [
          "Guest"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully"
          },
          "400": {
            "description": "Invalid or expired OTP"
          }
        }
      }
    },
    "/api/guest/track-service/{requestId}": {
      "get": {
        "summary": "Track service request status",
        "tags": [
          "Guest"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Service request ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Service request details retrieved"
          },
          "404": {
            "description": "Service request not found"
          }
        }
      }
    },
    "/api/guest/service-types": {
      "get": {
        "summary": "Get available service types",
        "tags": [
          "Guest"
        ],
        "description": "Retrieve list of all available service types",
        "responses": {
          "200": {
            "description": "Service types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/guest/files/{filename}": {
      "get": {
        "summary": "Serve uploaded guest files",
        "tags": [
          "Guest"
        ],
        "description": "Retrieve uploaded files from guest complaints",
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the uploaded file"
          }
        ],
        "responses": {
          "200": {
            "description": "File served successfully",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/api/logs": {
      "post": {
        "summary": "Submit frontend logs",
        "tags": [
          "Logs"
        ],
        "description": "Submit client-side logs to the server for monitoring and debugging",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LogEntry"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LogEntry"
                    }
                  }
                ]
              },
              "examples": {
                "singleLog": {
                  "summary": "Single log entry",
                  "value": {
                    "level": "error",
                    "message": "Failed to submit complaint",
                    "timestamp": "2024-12-01T10:30:00Z",
                    "url": "/complaints/new",
                    "stack": "Error: Network request failed..."
                  }
                },
                "multipleLogs": {
                  "summary": "Multiple log entries",
                  "value": [
                    {
                      "level": "info",
                      "message": "User logged in",
                      "timestamp": "2024-12-01T10:00:00Z"
                    },
                    {
                      "level": "error",
                      "message": "API request failed",
                      "timestamp": "2024-12-01T10:30:00Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logs received successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "received": {
                          "type": "integer",
                          "description": "Number of log entries received"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid log format"
          },
          "429": {
            "description": "Too many log submissions (rate limited)"
          }
        }
      }
    },
    "/api/logs/stats": {
      "get": {
        "summary": "Get log statistics",
        "tags": [
          "Logs"
        ],
        "description": "Retrieve statistics about application logs (Admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "timeframe",
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "24h",
                "7d",
                "30d"
              ],
              "default": "24h"
            },
            "description": "Time frame for statistics"
          },
          {
            "in": "query",
            "name": "level",
            "schema": {
              "type": "string",
              "enum": [
                "error",
                "warn",
                "info",
                "debug"
              ]
            },
            "description": "Filter by log level"
          }
        ],
        "responses": {
          "200": {
            "description": "Log statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/LogStats"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/maintenance/analytics": {
      "get": {
        "summary": "Get maintenance team analytics",
        "tags": [
          "Maintenance"
        ],
        "description": "Retrieve comprehensive analytics for maintenance team members",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for analytics"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for analytics"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "REGISTERED",
                "ASSIGNED",
                "IN_PROGRESS",
                "RESOLVED",
                "CLOSED"
              ]
            },
            "description": "Filter by complaint status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
              ]
            },
            "description": "Filter by complaint priority"
          }
        ],
        "responses": {
          "200": {
            "description": "Maintenance analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MaintenanceAnalytics"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/maintenance/dashboard": {
      "get": {
        "summary": "Get maintenance team dashboard",
        "tags": [
          "Maintenance"
        ],
        "description": "Retrieve dashboard data for maintenance team members including current assignments and metrics",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Maintenance dashboard data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MaintenanceDashboard"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/complaints/{id}/materials": {
      "get": {
        "summary": "Get materials for a complaint",
        "tags": [
          "Materials"
        ],
        "description": "Retrieve all materials associated with a specific complaint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Complaint ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Materials retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Material"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Complaint not found"
          }
        }
      },
      "post": {
        "summary": "Add material to complaint",
        "tags": [
          "Materials"
        ],
        "description": "Add a new material requirement to a complaint (Maintenance Team only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Complaint ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaterialRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Material added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Material"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Complaint not found"
          }
        }
      }
    },
    "/api/materials/{id}": {
      "put": {
        "summary": "Update material details",
        "tags": [
          "Materials"
        ],
        "description": "Update material information (Maintenance Team only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Material ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string"
                  },
                  "estimatedCost": {
                    "type": "number"
                  },
                  "actualCost": {
                    "type": "number"
                  },
                  "supplier": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "REQUIRED",
                      "ORDERED",
                      "DELIVERED",
                      "USED"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Material updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Material"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Material not found"
          }
        }
      },
      "delete": {
        "summary": "Delete material",
        "tags": [
          "Materials"
        ],
        "description": "Remove a material from complaint (Maintenance Team only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Material ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Material deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "description": "Material not found"
          }
        }
      }
    },
    "/api/reports/dashboard": {
      "get": {
        "summary": "Get dashboard metrics",
        "tags": [
          "Reports"
        ],
        "description": "Retrieve key metrics for the dashboard (Admin, Ward Officer, Maintenance Team)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DashboardMetrics"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/reports/trends": {
      "get": {
        "summary": "Get complaint trends",
        "tags": [
          "Reports"
        ],
        "description": "Retrieve complaint trends over time (Admin, Ward Officer)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month"
              ],
              "default": "month"
            },
            "description": "Time period for trends"
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for trends"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for trends"
          },
          {
            "in": "query",
            "name": "ward",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ward ID (Admin only)"
          }
        ],
        "responses": {
          "200": {
            "description": "Trends retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/TrendData"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/reports/sla": {
      "get": {
        "summary": "Get SLA compliance report",
        "tags": [
          "Reports"
        ],
        "description": "Retrieve SLA compliance metrics by priority (Admin, Ward Officer)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "SLA report retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SLAReport"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/reports/analytics": {
      "get": {
        "summary": "Get comprehensive analytics data",
        "tags": [
          "Reports"
        ],
        "description": "Retrieve comprehensive analytics for unified reports (Admin, Ward Officer, Maintenance Team)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for analytics"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for analytics"
          },
          {
            "in": "query",
            "name": "ward",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ward ID (Admin only)"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "registered",
                "assigned",
                "in_progress",
                "resolved",
                "closed",
                "reopened"
              ]
            },
            "description": "Filter by complaint status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "critical"
              ]
            },
            "description": "Filter by complaint priority"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AnalyticsData"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/reports/heatmap": {
      "get": {
        "summary": "Get heatmap data for complaints",
        "tags": [
          "Reports"
        ],
        "description": "Retrieve heatmap data showing complaint distribution across wards/sub-zones and types",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for heatmap data"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for heatmap data"
          },
          {
            "in": "query",
            "name": "ward",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ward ID (Admin only)"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint priority"
          }
        ],
        "responses": {
          "200": {
            "description": "Heatmap data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/HeatmapData"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/reports/export": {
      "get": {
        "summary": "Export reports in various formats",
        "tags": [
          "Reports"
        ],
        "description": "Export complaint reports in CSV or JSON format (Admin, Ward Officer)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "csv",
                "json"
              ]
            },
            "description": "Export format"
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Start date for export"
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "End date for export"
          },
          {
            "in": "query",
            "name": "ward",
            "schema": {
              "type": "string"
            },
            "description": "Filter by ward ID (Admin only)"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint type"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            },
            "description": "Filter by complaint priority"
          }
        ],
        "responses": {
          "200": {
            "description": "Report exported successfully",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "complaints": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Complaint"
                          }
                        },
                        "summary": {
                          "type": "object"
                        },
                        "filters": {
                          "type": "object"
                        },
                        "exportedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config/public": {
      "get": {
        "summary": "Get public system configuration",
        "tags": [
          "SystemConfig"
        ],
        "description": "Retrieve public system configuration values for frontend use",
        "responses": {
          "200": {
            "description": "Public configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "appName": {
                          "type": "string",
                          "example": "Fix_Smart_CMS"
                        },
                        "appVersion": {
                          "type": "string",
                          "example": "1.0.3"
                        },
                        "organizationName": {
                          "type": "string",
                          "example": "Smart City Management"
                        },
                        "websiteUrl": {
                          "type": "string",
                          "example": "https://fix-smart-cms.gov.in"
                        },
                        "logoUrl": {
                          "type": "string",
                          "nullable": true
                        },
                        "primaryColor": {
                          "type": "string",
                          "example": "#667eea"
                        },
                        "secondaryColor": {
                          "type": "string",
                          "example": "#764ba2"
                        },
                        "supportEmail": {
                          "type": "string",
                          "example": "support@fix-smart-cms.gov.in"
                        },
                        "complaintIdPrefix": {
                          "type": "string",
                          "example": "KSC"
                        },
                        "complaintIdLength": {
                          "type": "integer",
                          "example": 4
                        },
                        "autoAssignComplaints": {
                          "type": "boolean"
                        },
                        "maintenanceMode": {
                          "type": "boolean"
                        },
                        "registrationEnabled": {
                          "type": "boolean"
                        }
                      }
                    },
                    "cached": {
                      "type": "object",
                      "properties": {
                        "isInitialized": {
                          "type": "boolean"
                        },
                        "configCount": {
                          "type": "integer"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/stats": {
      "get": {
        "summary": "Get cache statistics",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Get system configuration cache statistics (Admin only)",
        "responses": {
          "200": {
            "description": "Cache statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "isInitialized": {
                          "type": "boolean"
                        },
                        "configCount": {
                          "type": "integer"
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "refreshInterval": {
                          "type": "integer"
                        },
                        "hasAutoRefresh": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config/admin": {
      "get": {
        "summary": "Get all system configuration (Admin only)",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Retrieve all system configuration values including sensitive data",
        "responses": {
          "200": {
            "description": "Admin configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cached": {
                          "type": "object",
                          "description": "Cached configuration values"
                        },
                        "database": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "isActive": {
                                "type": "boolean"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        },
                        "cacheStats": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config/refresh": {
      "post": {
        "summary": "Refresh configuration cache",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Manually refresh the system configuration cache",
        "responses": {
          "200": {
            "description": "Cache refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config": {
      "post": {
        "summary": "Create new system configuration",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemConfigCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SystemConfig"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "409": {
            "description": "Configuration key already exists"
          }
        }
      }
    },
    "/api/config/bulk": {
      "post": {
        "summary": "Bulk update system configurations",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemConfigBulkUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk update completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "updated": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SystemConfig"
                          }
                        },
                        "created": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SystemConfig"
                          }
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "error": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config/type/{type}": {
      "get": {
        "summary": "Get configurations by type",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "description": "Configuration type",
            "schema": {
              "type": "string",
              "example": "app"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "configs": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "count": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config/pattern/{pattern}": {
      "get": {
        "summary": "Get configurations by pattern",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "pattern",
            "in": "path",
            "required": true,
            "description": "Pattern to match against configuration keys",
            "schema": {
              "type": "string",
              "example": "COMPLAINT_"
            }
          },
          {
            "name": "matchType",
            "in": "query",
            "description": "Type of pattern matching",
            "schema": {
              "type": "string",
              "enum": [
                "startsWith",
                "endsWith",
                "includes"
              ],
              "default": "startsWith"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "pattern": {
                          "type": "string"
                        },
                        "matchType": {
                          "type": "string"
                        },
                        "configs": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "count": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/api/config/{key}": {
      "put": {
        "summary": "Update system configuration",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "Configuration key to update",
            "schema": {
              "type": "string",
              "example": "APP_NAME"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Configuration value",
                    "example": "My Smart CMS"
                  },
                  "type": {
                    "type": "string",
                    "description": "Configuration type/category",
                    "example": "app"
                  },
                  "description": {
                    "type": "string",
                    "description": "Configuration description",
                    "example": "Application display name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      },
      "delete": {
        "summary": "Delete system configuration",
        "tags": [
          "SystemConfig"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "description": "Configuration key to delete",
            "schema": {
              "type": "string",
              "example": "DEPRECATED_SETTING"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/uploads/complaint/{complaintId}/attachment": {
      "post": {
        "summary": "Upload attachment for a complaint",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "complaintId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "complaintAttachment": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image, PDF, or document file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FileUpload"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or upload error"
          }
        }
      }
    },
    "/api/uploads/profile/picture": {
      "post": {
        "summary": "Upload profile picture",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "profilePicture": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture uploaded successfully"
          }
        }
      }
    },
    "/api/uploads/logo": {
      "post": {
        "summary": "Upload application logo",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Logo image file (JPEG, PNG, GIF, WEBP, SVG)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FileUpload"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or upload error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "413": {
            "description": "File too large"
          }
        }
      }
    },
    "/api/uploads/{id}": {
      "get": {
        "summary": "Get uploaded file",
        "tags": [
          "Uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        }
      },
      "delete": {
        "summary": "Delete uploaded file",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/api/uploads/logo/{filename}": {
      "get": {
        "summary": "Get uploaded logo file",
        "tags": [
          "Uploads"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo file content",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Logo file not found"
          }
        }
      }
    },
    "/api/wards/boundaries": {
      "get": {
        "summary": "Get all wards with their geographic boundaries",
        "tags": [
          "Wards"
        ],
        "responses": {
          "200": {
            "description": "Wards with boundaries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WardBoundary"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/wards/{wardId}/boundaries": {
      "put": {
        "summary": "Update ward geographic boundaries",
        "tags": [
          "Wards"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "wardId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Ward ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "boundaries": {
                    "type": "string",
                    "description": "JSON string of polygon coordinates"
                  },
                  "centerLat": {
                    "type": "number"
                  },
                  "centerLng": {
                    "type": "number"
                  },
                  "boundingBox": {
                    "type": "string",
                    "description": "JSON string of bounding box"
                  },
                  "subZones": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "boundaries": {
                          "type": "string"
                        },
                        "centerLat": {
                          "type": "number"
                        },
                        "centerLng": {
                          "type": "number"
                        },
                        "boundingBox": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ward boundaries updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/WardBoundary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid boundary data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Ward not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/wards/detect-area": {
      "post": {
        "summary": "Detect ward and sub-zone based on coordinates",
        "tags": [
          "Wards"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "latitude",
                  "longitude"
                ],
                "properties": {
                  "latitude": {
                    "type": "number",
                    "description": "Latitude coordinate",
                    "example": 9.9312
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Longitude coordinate",
                    "example": 76.2673
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location area detected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/LocationDetection"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid coordinates"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}