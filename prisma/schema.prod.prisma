// Production Prisma schema file for PostgreSQL
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for PostgreSQL production deployment
enum UserRole {
  CITIZEN
  WARD_OFFICER
  MAINTENANCE_TEAM
  ADMINISTRATOR
  GUEST
}

enum ComplaintStatus {
  REGISTERED
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SLAStatus {
  ON_TIME
  WARNING
  OVERDUE
  COMPLETED
}

enum ServiceRequestStatus {
  SUBMITTED
  VERIFIED
  PROCESSING
  APPROVED
  REJECTED
  COMPLETED
}

// enum NotificationType {
//   EMAIL
//   SMS
//   IN_APP
// }

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  fullName    String
  phoneNumber String?
  password    String?
  role        UserRole @default(CITIZEN)
  wardId      String?
  department  String?
  language    String   @default("en")
  avatar      String?
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  joinedOn    DateTime @default(now())

  // Relations
  ward                  Ward?              @relation(fields: [wardId], references: [id])
  submittedComplaints   Complaint[]        @relation("SubmittedBy")
  assignedComplaints    Complaint[]        @relation("AssignedTo")
  wardOfficerComplaints Complaint[]        @relation("WardOfficer")
  maintenanceTeamComplaints Complaint[]    @relation("MaintenanceTeam")
//   submittedServiceRequests ServiceRequest[] @relation("ServiceSubmittedBy")
//   assignedServiceRequests  ServiceRequest[] @relation("ServiceAssignedTo")
  statusLogs            StatusLog[]
//   serviceStatusLogs ServiceRequestStatusLog[]
//   notifications     Notification[]
//   sentMessages      Message[]          @relation("SentBy")
//   receivedMessages  Message[]          @relation("ReceivedBy")
  otpSessions           OTPSession[]
//   addedMaterials    Material[]
  uploadedPhotos    ComplaintPhoto[]
  uploadedAttachments Attachment[]     @relation("AttachmentUploadedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role, isActive])
  @@index([wardId])
  @@map("users")
}

model Ward {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  // Relations
  users       User[]
  complaints  Complaint[]
//   serviceRequests ServiceRequest[]
  subZones    SubZone[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wards")
}

model SubZone {
  id          String  @id @default(cuid())
  name        String
  wardId      String
  description String?
  isActive    Boolean @default(true)

  // Relations
  ward        Ward        @relation(fields: [wardId], references: [id], onDelete: Cascade)
  complaints  Complaint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([wardId])
  @@map("sub_zones")
}

model ComplaintType {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  priority    Priority  @default(MEDIUM)
  slaHours    Int       @default(48)
  isActive    Boolean   @default(true)
  complaints  Complaint[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("complaint_types")
}

model Complaint {
  id              String            @id @default(cuid())
  complaintId     String?           @unique  // Human-readable complaint ID like KSC0001
  title           String?
  description     String
  // Legacy string type retained for backward compatibility
  type            String?
  complaintTypeId Int?
  status          ComplaintStatus   @default(REGISTERED)
  priority        Priority          @default(MEDIUM)
  slaStatus       SLAStatus         @default(ON_TIME)
  
  // Location Information
  wardId          String
  subZoneId       String?
  area            String
  landmark        String?
  address         String?
  coordinates     String?           // JSON string for lat/lng
  latitude        Float?            // Explicit latitude field
  longitude       Float?            // Explicit longitude field
  
  // Contact Information
  contactName     String?
  contactEmail    String?
  contactPhone    String
  isAnonymous     Boolean           @default(false)
  
  // Assignment and Tracking
  submittedById   String?
  assignedToId    String?           // Generic assignment field (kept for backward compatibility)
  resolvedById    String?
  wardOfficerId   String?           // Automatically assigned ward officer
  maintenanceTeamId String?         // Assigned maintenance team member
  
  // Timestamps
  submittedOn     DateTime          @default(now())
  assignedOn      DateTime?
  resolvedOn      DateTime?
  closedOn        DateTime?
  deadline        DateTime?
  
  // Additional Information
  remarks         String?
  citizenFeedback String?
  rating          Int?              // 1-5 rating
  assignToTeam    Boolean   @default(false)  // added field for team assignment in ward dashboard
  tags            String?           // JSON array of tags
  
  // Relations
  ward            Ward              @relation(fields: [wardId], references: [id])
  subZone         SubZone?          @relation(fields: [subZoneId], references: [id])
  submittedBy     User?             @relation("SubmittedBy", fields: [submittedById], references: [id])
  assignedTo      User?             @relation("AssignedTo", fields: [assignedToId], references: [id])
  wardOfficer     User?             @relation("WardOfficer", fields: [wardOfficerId], references: [id])
  maintenanceTeam User?             @relation("MaintenanceTeam", fields: [maintenanceTeamId], references: [id])
  complaintType   ComplaintType?    @relation(fields: [complaintTypeId], references: [id])
  statusLogs      StatusLog[]
  attachments     Attachment[]
//   notifications   Notification[]
//   messages        Message[]
//   materials       Material[]
  photos          ComplaintPhoto[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([submittedById, createdAt])
  @@index([wardId, status])
  @@index([assignedToId, status])
  @@index([maintenanceTeamId, status])
  @@index([type, status])
  @@index([complaintTypeId, status])
  @@index([priority, status])
  @@index([submittedOn])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@map("complaints")
}

model StatusLog {
  id          String   @id @default(cuid())
  complaintId String
  userId      String
  fromStatus  String?  // Previous status
  toStatus    String   // New status
  comment     String?
  timestamp   DateTime @default(now())
  
  // Relations
  complaint   Complaint       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id])

  @@index([complaintId, timestamp])
  @@index([userId])
  @@map("status_logs")
}

enum AttachmentEntityType {
  COMPLAINT
  CITIZEN
  USER
  SERVICE_REQUEST
  SYSTEM_CONFIG
}

model Attachment {
  id           String                @id @default(cuid())
  entityType   AttachmentEntityType @default(COMPLAINT)
  entityId     String
  complaintId  String?
  fileName     String
  originalName String
  mimeType     String
  size         Int
  url          String
  createdAt    DateTime              @default(now())
  uploadedById String?

  // Relations
  complaint   Complaint? @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  uploadedBy  User?      @relation("AttachmentUploadedBy", fields: [uploadedById], references: [id], onDelete: SetNull)

  @@index([entityType, entityId])
  @@index([fileName])
  @@index([complaintId])
  @@map("attachments")
}

// model Notification {
//   id          String   @id @default(cuid())
//   userId      String
//   complaintId String?
//   type        NotificationType
//   title       String
//   message     String
//   isRead      Boolean  @default(false)
//   createdAt   DateTime @default(now())
//
//   // Relations
//   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   complaint   Complaint? @relation(fields: [complaintId], references: [id])
//
//   @@index([userId, isRead])
//   @@map("notifications")
// }

// model Message {
//   id          String   @id @default(cuid())
//   complaintId String
//   senderId    String
//   receiverId  String
//   content     String
//   sentAt      DateTime @default(now())
//
//   // Relations
//   complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
//   sender      User      @relation("SentBy", fields: [senderId], references: [id])
//   receiver    User      @relation("ReceivedBy", fields: [receiverId], references: [id])
//
//   @@index([complaintId, sentAt])
//   @@map("messages")
// }

model OTPSession {
  id          String    @id @default(cuid())
  userId      String?
  email       String
  phoneNumber String?
  otpCode     String
  purpose     String    @default("GUEST_VERIFICATION") // GUEST_VERIFICATION, PASSWORD_RESET, etc.
  isVerified  Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  verifiedAt  DateTime?
  
  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, purpose, isVerified])
  @@index([expiresAt])
  @@index([userId])
  @@map("otp_sessions")
}

// model Department {
//   ...
// }

model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  type        String?   // Type to categorize the setting (e.g., 'app', 'complaint', 'contact', 'system')
  description String?
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt

  @@index([key, isActive])
  @@map("system_config")
}

// model ServiceRequest {
//   ...
// }

// model ServiceRequestStatusLog {
//   ...
// }

// model Report {
//   ...
// }

// model Material {
//   id          String   @id @default(cuid())
//   complaintId String
//   userId      String
//   description String
//   quantity    Int
//   usedAt      DateTime @default(now())
//
//   // Relations
//   complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
//   user        User      @relation(fields: [userId], references: [id])
//
//   @@index([complaintId, userId])
//   @@map("materials")
// }

model ComplaintPhoto {
  id          String   @id @default(cuid())
  complaintId String
  userId      String?
  url         String
  description String?
  uploadedAt  DateTime @default(now())

  // Relations
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@index([complaintId])
  @@map("complaint_photos")
}
