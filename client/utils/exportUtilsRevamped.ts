// Simple export utilities with template-based rendering
import { TemplateEngine } from "./templateEngine";

// Simple interfaces for export
interface ExportData {
  reportTitle: string;
  appName: string;
  appLogoUrl?: string;
  generatedAt: string;
  fromDate: string;
  toDate: string;
  exportedBy: {
    name: string;
    role: string;
  };
  summary: {
    totalComplaints: number;
    resolvedComplaints: number;
    pendingComplaints: number;
    resolutionRate: number;
  };
  categories: Array<{
    name: string;
    count: number;
    percentage: number;
    avgTime: number;
  }>;
  wards: Array<{
    name: string;
    complaints: number;
    resolved: number;
    pending: number;
    efficiency: number;
  }>;
  complaints: any[];
}

// Load and render template with data
const loadAndRenderTemplate = async (templateName: string, data: ExportData): Promise<string> => {
  try {
    const templateEngine = TemplateEngine.getInstance();
    const templatePath = `/templates/export/${templateName}.html`;
    
    console.log(`Loading template: ${templatePath}`);
    const template = await templateEngine.loadTemplate(templatePath);
    
    if (!template) {
      throw new Error(`Template not found: ${templateName}`);
    }
    
    const renderedHtml = templateEngine.render(template, data);
    console.log(`Template rendered successfully: ${renderedHtml.length} characters`);
    
    return renderedHtml;
  } catch (error) {
    console.error('Template loading/rendering error:', error);
    throw new Error(`Failed to load template ${templateName}: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Simple PDF export using template
export const exportToPDF = async (data: ExportData): Promise<void> => {
  try {
    // Load and render template
    const html = await loadAndRenderTemplate('unifiedReport', data);
    
    // Import html2pdf library
    const { default: html2pdf } = await import('html2pdf.js');
    
    // Create temporary container
    const container = document.createElement('div');
    container.innerHTML = html;
    container.style.position = 'absolute';
    container.style.left = '-9999px';
    container.style.top = '-9999px';
    document.body.appendChild(container);

    // PDF options
    const options = {
      margin: [10, 10, 10, 10],
      filename: `${data.appName.replace(/\s+/g, '-')}-Report-${new Date().toISOString().split('T')[0]}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { 
        scale: 2,
        useCORS: true,
        letterRendering: true
      },
      jsPDF: { 
        unit: 'mm', 
        format: 'a4', 
        orientation: 'portrait'
      }
    };

    // Generate and save PDF
    await html2pdf().set(options).from(container).save();
    
    // Cleanup
    document.body.removeChild(container);
    
    console.log('PDF export completed successfully');
  } catch (error) {
    console.error('PDF export failed:', error);
    throw new Error(`PDF export failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Simple Excel export
export const exportToExcel = async (data: ExportData): Promise<void> => {
  try {
    const XLSX = await import("xlsx");
    const workbook = XLSX.utils.book_new();

    // Summary sheet
    const summaryData = [
      [data.appName],
      [data.reportTitle],
      [""],
      ["Generated:", data.generatedAt],
      ["Date Range:", `${data.fromDate} to ${data.toDate}`],
      ["Generated By:", `${data.exportedBy.name} (${data.exportedBy.role})`],
      [""],
      ["SUMMARY"],
      ["Total Complaints:", data.summary.totalComplaints],
      ["Resolved:", data.summary.resolvedComplaints],
      ["Pending:", data.summary.pendingComplaints],
      ["Resolution Rate:", `${data.summary.resolutionRate}%`],
      [""],
      ["CATEGORIES"],
      ["Category", "Count", "Percentage", "Avg Time (days)"]
    ];

    // Add category data
    data.categories.forEach((category) => {
      summaryData.push([
        category.name,
        category.count,
        `${category.percentage}%`,
        category.avgTime
      ]);
    });

    const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(workbook, summarySheet, "Summary");

    // Complaints sheet if available
    if (data.complaints && data.complaints.length > 0) {
      const complaintsSheet = XLSX.utils.json_to_sheet(data.complaints);
      XLSX.utils.book_append_sheet(workbook, complaintsSheet, "Complaints");
    }

    // Save file
    const fileName = `${data.appName.replace(/\s+/g, '-')}-Report-${new Date().toISOString().split('T')[0]}.xlsx`;
    XLSX.writeFile(workbook, fileName);
    
    console.log('Excel export completed successfully');
  } catch (error) {
    console.error('Excel export failed:', error);
    throw new Error(`Excel export failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Simple CSV export
export const exportToCSV = async (data: ExportData): Promise<void> => {
  try {
    // Prepare CSV data
    const csvData = [];
    
    // Add header information
    csvData.push([data.appName]);
    csvData.push([data.reportTitle]);
    csvData.push([`Generated: ${data.generatedAt}`]);
    csvData.push([`Date Range: ${data.fromDate} to ${data.toDate}`]);
    csvData.push([`Generated By: ${data.exportedBy.name} (${data.exportedBy.role})`]);
    csvData.push([]);
    
    // Add summary
    csvData.push(['SUMMARY']);
    csvData.push(['Total Complaints', data.summary.totalComplaints]);
    csvData.push(['Resolved', data.summary.resolvedComplaints]);
    csvData.push(['Pending', data.summary.pendingComplaints]);
    csvData.push(['Resolution Rate', `${data.summary.resolutionRate}%`]);
    csvData.push([]);
    
    // Add categories
    csvData.push(['CATEGORIES']);
    csvData.push(['Category', 'Count', 'Percentage', 'Avg Time (days)']);
    data.categories.forEach(category => {
      csvData.push([category.name, category.count, `${category.percentage}%`, category.avgTime]);
    });
    
    // Convert to CSV string
    const csvContent = csvData.map(row => 
      row.map(field => `"${String(field).replace(/"/g, '""')}"`).join(',')
    ).join('\n');

    // Add BOM for proper UTF-8 encoding
    const csvWithBOM = '\uFEFF' + csvContent;
    
    // Create and download file
    const blob = new Blob([csvWithBOM], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    
    link.setAttribute('href', url);
    link.setAttribute('download', `${data.appName.replace(/\s+/g, '-')}-Report-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('CSV export completed successfully');
  } catch (error) {
    console.error('CSV export failed:', error);
    throw new Error(`CSV export failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Simple RBAC validation
export const validateExportPermissions = (userRole: string): boolean => {
  return ['ADMINISTRATOR', 'WARD_OFFICER', 'MAINTENANCE_TEAM'].includes(userRole);
};

// Enhanced RBAC validation for export requests
export const validateExportRequest = (
  filters: any,
  userRole: string,
  userWardId?: string
): { isValid: boolean; error?: Error } => {
  try {
    // Check basic permissions
    if (!validateExportPermissions(userRole)) {
      return {
        isValid: false,
        error: new Error('You do not have permission to export reports')
      };
    }

    // Ward Officer restrictions
    if (userRole === 'WARD_OFFICER') {
      if (!userWardId) {
        return {
          isValid: false,
          error: new Error('Ward Officer must be assigned to a ward to export data')
        };
      }
      
      // Check if trying to access other wards
      if (filters.wards && filters.wards.length > 0) {
        const hasOtherWards = filters.wards.some((wardId: string) => wardId !== userWardId);
        if (hasOtherWards) {
          return {
            isValid: false,
            error: new Error('Ward Officers can only export data from their assigned ward')
          };
        }
      }
    }

    return { isValid: true };
  } catch (error) {
    return {
      isValid: false,
      error: error instanceof Error ? error : new Error('Validation failed')
    };
  }
};

// Template-based export function
export const exportWithTemplate = async (
  templateId: string,
  data: any,
  format: 'pdf' | 'excel' | 'html',
  filename?: string
): Promise<void> => {
  try {
    console.log(`🎨 Starting template export: ${templateId} -> ${format}`);
    
    // Prepare data in the expected format
    const exportData: ExportData = {
      reportTitle: data.reportTitle || 'Report',
      appName: data.appName || 'Smart CMS',
      appLogoUrl: data.appLogoUrl,
      generatedAt: data.generatedAt || new Date().toLocaleString(),
      fromDate: data.fromDate || 'All Time',
      toDate: data.toDate || 'Present',
      exportedBy: data.exportedBy || { name: 'System User', role: 'Unknown' },
      summary: data.summary || { totalComplaints: 0, resolvedComplaints: 0, pendingComplaints: 0, resolutionRate: 0 },
      categories: data.categories || [],
      wards: data.wards || [],
      complaints: data.complaints || []
    };

    // Export based on format
    switch (format) {
      case 'pdf':
        await exportToPDF(exportData);
        break;
      case 'excel':
        await exportToExcel(exportData);
        break;
      case 'html':
        // For HTML, load and render template then download
        const html = await loadAndRenderTemplate('unifiedReport', exportData);
        const blob = new Blob([html], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename || `${exportData.appName.replace(/\s+/g, '-')}-Report-${new Date().toISOString().split('T')[0]}.html`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        break;
      default:
        throw new Error(`Unsupported export format: ${format}`);
    }
    
    console.log(`✅ Export completed successfully: ${format}`);
  } catch (error) {
    console.error('❌ Template export error:', error);
    throw new Error(`Failed to export ${format.toUpperCase()}: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Simple data preparation function
export const prepareReportData = (
  analyticsData: any,
  systemConfig: any,
  user: any,
  filters: any
): ExportData => {
  const now = new Date();
  
  // Extract data with safe fallbacks
  const summary = analyticsData?.summary || analyticsData?.complaints || {
    totalComplaints: 0,
    resolvedComplaints: 0,
    pendingComplaints: 0,
    resolutionRate: 0
  };
  
  const categories = (analyticsData?.categories || []).map((cat: any, index: number) => ({
    name: cat.name || 'Unknown',
    count: cat.count || 0,
    percentage: summary.totalComplaints > 0 ? Math.round((cat.count / summary.totalComplaints) * 100) : 0,
    avgTime: cat.avgTime || 0
  }));
  
  const wards = (analyticsData?.wards || []).map((ward: any) => ({
    name: ward.name || 'Unknown Ward',
    complaints: ward.complaints || 0,
    resolved: ward.resolved || 0,
    pending: ward.pending || 0,
    efficiency: ward.efficiency || 0
  }));
  
  return {
    reportTitle: 'Unified Analytics Report',
    appName: systemConfig.appName || 'Smart CMS',
    appLogoUrl: systemConfig.appLogoUrl,
    generatedAt: now.toLocaleString(),
    fromDate: filters.dateRange?.from || 'All Time',
    toDate: filters.dateRange?.to || 'Present',
    exportedBy: {
      name: user?.fullName || 'System User',
      role: user?.role || 'Unknown'
    },
    summary: {
      totalComplaints: summary.totalComplaints || 0,
      resolvedComplaints: summary.resolvedComplaints || 0,
      pendingComplaints: summary.pendingComplaints || 0,
      resolutionRate: summary.resolutionRate || 0
    },
    categories,
    wards,
    complaints: analyticsData?.complaints || []
  };
};

// Enhanced data preparation function (alias for compatibility)
export const prepareUnifiedReportData = prepareReportData;

